// Code generated by thriftrw-plugin-yarpc
// @generated

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package keyvalueserver

import (
	"context"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/internal/examples/thrift-keyvalue/keyvalue/many/services"
	"go.uber.org/yarpc/internal/examples/thrift-keyvalue/keyvalue/many/unions"
	"go.uber.org/yarpc/encoding/thrift"
)

// Interface is the server-side interface for the KeyValue service.
type Interface interface {
	DeleteValue(
		ctx context.Context,
		Key *services.Key,
	) error

	GetManyValues(
		ctx context.Context,
		Range []services.Key,
	) ([]*unions.ArbitraryValue, error)

	GetValue(
		ctx context.Context,
		Key *services.Key,
	) (*unions.ArbitraryValue, error)

	SetValue(
		ctx context.Context,
		Key *services.Key,
		Value *unions.ArbitraryValue,
	) error

	SetValueV2(
		ctx context.Context,
		Key services.Key,
		Value *unions.ArbitraryValue,
	) error

	Size(
		ctx context.Context,
	) (int64, error)
}

// New prepares an implementation of the KeyValue service for
// registration.
//
// 	handler := KeyValueHandler{}
// 	dispatcher.Register(keyvalueserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {
	h := handler{impl}
	service := thrift.Service{
		Name: "KeyValue",
		Methods: []thrift.Method{

			thrift.Method{
				Name: "deleteValue",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.DeleteValue),
				},
				Signature:    "DeleteValue(Key *services.Key)",
				ThriftModule: services.ThriftModule,
			},

			thrift.Method{
				Name: "getManyValues",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetManyValues),
				},
				Signature:    "GetManyValues(Range []services.Key) ([]*unions.ArbitraryValue)",
				ThriftModule: services.ThriftModule,
			},

			thrift.Method{
				Name: "getValue",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetValue),
				},
				Signature:    "GetValue(Key *services.Key) (*unions.ArbitraryValue)",
				ThriftModule: services.ThriftModule,
			},

			thrift.Method{
				Name: "setValue",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.SetValue),
				},
				Signature:    "SetValue(Key *services.Key, Value *unions.ArbitraryValue)",
				ThriftModule: services.ThriftModule,
			},

			thrift.Method{
				Name: "setValueV2",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.SetValueV2),
				},
				Signature:    "SetValueV2(Key services.Key, Value *unions.ArbitraryValue)",
				ThriftModule: services.ThriftModule,
			},

			thrift.Method{
				Name: "size",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Size),
				},
				Signature:    "Size() (int64)",
				ThriftModule: services.ThriftModule,
			},
		},
	}

	procedures := make([]transport.Procedure, 0, 6)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }

func (h handler) DeleteValue(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args services.KeyValue_DeleteValue_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.DeleteValue(ctx, args.Key)

	hadError := err != nil
	result, err := services.KeyValue_DeleteValue_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetManyValues(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args services.KeyValue_GetManyValues_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetManyValues(ctx, args.Range)

	hadError := err != nil
	result, err := services.KeyValue_GetManyValues_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetValue(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args services.KeyValue_GetValue_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetValue(ctx, args.Key)

	hadError := err != nil
	result, err := services.KeyValue_GetValue_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) SetValue(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args services.KeyValue_SetValue_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.SetValue(ctx, args.Key, args.Value)

	hadError := err != nil
	result, err := services.KeyValue_SetValue_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) SetValueV2(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args services.KeyValue_SetValueV2_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.SetValueV2(ctx, args.Key, args.Value)

	hadError := err != nil
	result, err := services.KeyValue_SetValueV2_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) Size(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args services.KeyValue_Size_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.Size(ctx)

	hadError := err != nil
	result, err := services.KeyValue_Size_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}
